@model RestaurantManage.Models.Registration

@{
    ViewData["Title"] = "Register a new Admin";
    Layout = "~/Views/Shared/AdminDashboardLayout.cshtml";
}
<style>
    .error-message {
        color: red;
    }
</style>
<h2>@ViewData["Title"]</h2>

<div class="signuppage-container">
    <form asp-action="RegisterAdmin" method="post" class="registration-form">
        @Html.AntiForgeryToken()
        <div class="signupform-group">
            <label for="FirstName">First Name</label>
            <input type="text" id="FirstName" name="FirstName" value="@Model.FirstName" class="form-control" placeholder="Enter your first name" required />
            <span class="error-message js-error" id="FirstNameError"></span>
            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "SignuperrorClass" })
        </div>

        <div class="signupform-group">
            <label for="LastName">Last Name</label>
            <input type="text" id="LastName" name="LastName" value="@Model.LastName" class="form-control" placeholder="Enter your last name" required />
            <span class="error-message js-error" id="LastNameError"></span>
            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "SignuperrorClass" })
        </div>

        <div class="signupform-group">
            <label for="DateOfBirth">Date of Birth</label>
            <input type="date" id="DateOfBirth" name="DateOfBirth" value="@Model.DateOfBirth.ToString("yyyy-MM-dd")" class="form-control" required max="@DateTime.Now.AddYears(-18).ToString("yyyy-MM-dd")" />
            <span class="error-message js-error" id="DateOfBirthError"></span>
            @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "SignuperrorClass" })
        </div>

        <div class="signupform-group">
            <label>Gender</label>
            <div class="gender-options">
                <input type="radio" id="Male" name="Gender" value="Male" @(Model.Gender == "Male" ? "checked" : "") />
                <label for="Male">Male</label>

                <input type="radio" id="Female" name="Gender" value="Female" @(Model.Gender == "Female" ? "checked" : "") />
                <label for="Female">Female</label>

                <input type="radio" id="Other" name="Gender" value="Other" @(Model.Gender == "Other" ? "checked" : "") />
                <label for="Other">Other</label>
            </div>
            <span class="error-message js-error" id="GenderError"></span>
            @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "SignuperrorClass" })
        </div>

        <div class="signupform-group">
            <label for="PhoneNumber">Phone Number</label>
            <input type="text" id="PhoneNumber" name="PhoneNumber" value="@Model.PhoneNumber" class="form-control" placeholder="Enter your phone number" required />
            <span class="error-message js-error" id="PhoneNumberError"></span>
            @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "SignuperrorClass" })
        </div>

        <div class="signupform-group">
            <label for="EmailAddress">Email Address</label>
            <input type="email" id="EmailAddress" name="EmailAddress" value="@Model.EmailAddress" class="form-control" placeholder="Enter your email address" required />
            @Html.ValidationMessageFor(model => model.EmailAddress, "", new { @class = "SignuperrorClass" })
        </div>

        <div class="signupform-group">
            <label for="Address">Address</label>
            <input type="text" id="Address" name="Address" value="@Model.Address" class="form-control" placeholder="Enter your address" required />
            <span class="error-message js-error" id="AddressError"></span>
            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "SignuperrorClass" })
        </div>

        <div class="signupform-group">
            <label for="Username">Username</label>
            <input type="text" id="Username" name="Username" value="@Model.Username" class="form-control" placeholder="Enter your username" required />
            <span class="error-message js-error" id="UsernameError"></span>
            @Html.ValidationMessageFor(model => model.Username, "", new { @class = "SignuperrorClass" })
        </div>

        <div class="signupform-group">
            <label for="Password">Password</label>
            <input type="password" id="Password" name="Password" class="form-control" placeholder="Enter your password" required />
            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "SignuperrorClass" })
        </div>

        <div class="signupform-group">
            <label for="ConfirmPassword">Confirm Password</label>
            <input type="password" id="ConfirmPassword" name="ConfirmPassword" class="form-control" placeholder="Confirm your password" required />
            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "SignuperrorClass" })
        </div>

        <input type="hidden" name="UserType" value="admin" />

        <button type="submit" class="signupsubmit-button">Register</button>
    </form>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const fields = {
            FirstName: {
                validate: (value) => /^[a-zA-Z]+$/.test(value),
                message: "First Name cannot be empty or contain numbers."
            },
            LastName: {
                validate: (value) => /^[a-zA-Z]+$/.test(value),
                message: "Last Name cannot be empty or contain numbers."
            },
            DateOfBirth: {
                validate: (value) => {
                    const dob = new Date(value);
                    const today = new Date();
                    const age = today.getFullYear() - dob.getFullYear();
                    const isValidDate = dob <= today && age >= 18;
                    return isValidDate;
                },
                message: "Date of Birth must be valid, not in the future, and age must be at least 18."
            },
            PhoneNumber: {
                validate: (value) => /^[0-9]{10}$/.test(value),
                message: "Phone Number must be a 10-digit number."
            },
            Address: {
                validate: (value) => value.trim() !== "",
                message: "Address cannot be empty."
            },
            Username: {
                validate: (value) => value.trim() !== "",
                message: "Username cannot be empty."
            }
        };

        Object.keys(fields).forEach((key) => {
            const input = document.getElementById(key);
            const errorSpan = document.getElementById(`${key}Error`);

            if (input) {
                input.addEventListener('focusout', function () {
                    const value = input.value;
                    const { validate, message } = fields[key];

                    if (!validate(value)) {
                        errorSpan.textContent = message;
                        input.classList.add('error');
                    } else {
                        errorSpan.textContent = "";
                        input.classList.remove('error');
                    }
                });
            }
        });
    });
</script>
